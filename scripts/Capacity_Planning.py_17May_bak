"""
	Name: Capacity_Planning.py
	Description: To perform Capacity Planning Report, remote target server or local target server
	Team: Software Service Automation
	Author: Arnab Roy(arnab.d.roy@capgemini.com)
	Inputs: Arguments [Execution_Location,HostName,OSUser,OSPassword,SID], LogFileLoc
	Output: ExitCode, ExitDesc(Log File)
"""

#!/usr/bin/env python
from sys import path
import sys
from Logger import Logger
import Logger as log
import time
import datetime
from os import system, getcwd, path, makedirs
import paramiko
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
from smptconfig import smtpserver, frommail, tomail




################################### Creating Log File ###############################
try:
	if os.name == 'nt':
		logdir = os.getcwd()+"\\logs"
	if os.name == 'posix':
		logdir = os.getcwd()+"/logs"
	
	logfile = "CAPACITY_PLANNING.log"
	log = Logger(logdir,logfile)

	log.info('*************************************************************************')

	log.info('Started Script Execution')
	
except Exception, e:
    print "ExitCode: 10"
    print "ExitDesc: Unable to create Logfile {0}".format(logfile)





try:
    
	if len(sys.argv) == 6:
		Execution_Location=sys.argv[1]
		HostName = sys.argv[2] 
		OSUser = sys.argv[3] 
		OSPassword = sys.argv[4]
		Sid=sys.argv[5]
		Execution_Location=Execution_Location.upper()
	

		############################ For Remote execution ##########################
	
		if Execution_Location=="REMOTE":
			
			dssh = paramiko.SSHClient()
			dssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
			dssh.connect(HostName, username=OSUser, password=OSPassword)
			
			#loginline=". ~/.bash_profile\nsqlplus -S / as sysdbA"

			#loginline="sqlplus -s / as sysdba"
			loginline="export ORACLE_SID=%s\nexport ORAENV_ASK=NO\n. oraenv > /dev/null 2>&1\nsqlplus -s / as sysdba"%Sid
			command1="""set lines 180
SELECT tablespace_name,size_mb,free_mb,max_size_mb,max_free_mb,
       TRUNC((max_free_mb/max_size_mb) * 100) AS free_pct,
       RPAD(' '|| RPAD('X',ROUND((max_size_mb-max_free_mb)/max_size_mb*10,0), 'X'),11,'-') AS used_pct
FROM   (
        SELECT a.tablespace_name,
               b.size_mb,
               a.free_mb,
               b.max_size_mb,
               a.free_mb + (b.max_size_mb - b.size_mb) AS max_free_mb
        FROM   (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS free_mb
                FROM   dba_free_space
                GROUP BY tablespace_name) a,
               (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS size_mb,
                       TRUNC(SUM(GREATEST(bytes,maxbytes))/1024/1024) AS max_size_mb
                FROM   dba_data_files
                GROUP BY tablespace_name) b
        WHERE  a.tablespace_name = b.tablespace_name
       )
ORDER BY Free_pct;"""
			ucommand = "%s << EOF\nset heading off;\nset feedback off;\n%s\nexit;\nEOF" %(loginline,command1)
			#print ucommand
			stdin, stdout, stderr = dssh.exec_command(ucommand)
			output = stdout.read()
			log.info('The command is: %s'%ucommand)
			log.info('The output is: %s'%output)
			er= stderr.read()
			log.info('The error if any is: %s' %er)
			#print stderr.read()
			output=output.strip(' \t\n\r')

			allLines=""
			allLines1=""
			tableHtml5=""
			table1Html5=""
			tablestrt="	<table><tr><th> TABLESPACE_NAME </th><th> SIZE_MB </th><th> FREE_MB </th><th> MAX_SIZE_MB </th><th> MAX_FREE_MB </th><th> FREE_PCT </th><th> USED_PCT </th></tr>"
			outx=output.splitlines()
			for i in outx:
				i=i.split()
				i0=str(i[0])
				i1=str(i[1])
				i2=str(i[2])
				i3=str(i[3])
				i4=str(i[4])
				i5=str(i[5])
				i6=str(i[6])


				beginning="<tr style='background-color:white;'>"
				bodyEl ="<td style='text-align:center;'> " + i0 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i1 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i2 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i3 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i4 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i5 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i6 + " </td>"

				end="</tr>"
				allLines+=beginning+bodyEl+end

			tableBody=allLines
			tableEnd="</table>"
			tableHtml5=tablestrt+tableBody+tableEnd
			cmd=""" df -h | awk '{printf "%-45s %10s %6s %6s %4s %s\\n",$1,$2,$3,$4,$5,$6}'"""
			stdin, stdout, stderr = dssh.exec_command(cmd)
			out = stdout.read()
			out=out.strip(' \t\n\r')
			tablestrt1="	<table>"
			outx1=out.splitlines()
			for i in outx1:
				i=i.split()
				i0=str(i[0])
				i1=str(i[1])
				i2=str(i[2])
				i3=str(i[3])
				i4=str(i[4])
				i5=str(i[5])



				beginning="<tr style='background-color:white;'>"
				bodyEl ="<td style='text-align:center;'> " + i0 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i1 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i2 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i3 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i4 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i5 + " </td>"


				end="</tr>"
				allLines1+=beginning+bodyEl+end
			

			tableBody1=allLines1

			tableEnd="</table>"
			table1Html5=tablestrt1+tableBody1+tableEnd

				
			
			
			if "ERROR" not in output:
				log.info('ExitCode: 0')
				log.info("ExitDesc: Capacity Planning Successful")
				print "ExitCode: 0"
				print "ExitDesc: Capacity Planning Successful"
				Status="Successful Execution"
			else:
				print "ExitCode: 1"
				print "ExitDesc: Error Occured:%s"%output
				Status="Some error Occured. Check logs"
					
		
		
		########################################################### For Local execution ########################################################################
		
		
		elif Execution_Location == "LOCAL":
			
			#loginline="sqlplus -s / as sysdba"
			#loginline=". ~/.bash_profile\nsqlplus -S / as sysdbA"
			loginline="export ORACLE_SID=%s\nexport ORAENV_ASK=NO\n. oraenv > /dev/null 2>&1\nsqlplus -s / as sysdba"%Sid
			command="""set lines 180
SELECT tablespace_name,size_mb,free_mb,max_size_mb,max_free_mb,
       TRUNC((max_free_mb/max_size_mb) * 100) AS free_pct,
       RPAD(' '|| RPAD('X',ROUND((max_size_mb-max_free_mb)/max_size_mb*10,0), 'X'),11,'-') AS used_pct
FROM   (
        SELECT a.tablespace_name,
               b.size_mb,
               a.free_mb,
               b.max_size_mb,
               a.free_mb + (b.max_size_mb - b.size_mb) AS max_free_mb
        FROM   (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS free_mb
                FROM   dba_free_space
                GROUP BY tablespace_name) a,
               (SELECT tablespace_name,
                       TRUNC(SUM(bytes)/1024/1024) AS size_mb,
                       TRUNC(SUM(GREATEST(bytes,maxbytes))/1024/1024) AS max_size_mb
                FROM   dba_data_files
                GROUP BY tablespace_name) b
        WHERE  a.tablespace_name = b.tablespace_name
       )
ORDER BY Free_pct;"""
			ucommand = "%s << EOF\nset heading off;\nset feedback off;\n%s\nexit;\nEOF" %(loginline,command)
			output = os.popen(ucommand).read()
			output=output.strip(' \t\n\r')
			
			allLines=""
			allLines1=""
			tableHtml5=""
			table1Html5=""
			tablestrt="	<table><tr><th> TABLESPACE_NAME </th><th> SIZE_MB </th><th> FREE_MB </th><th> MAX_SIZE_MB </th><th> MAX_FREE_MB </th><th> FREE_PCT </th><th> USED_PCT </th></tr>"
			outx=output.splitlines()

			for i in outx:
				i=i.split()
				i0=str(i[0])
				i1=str(i[1])
				i2=str(i[2])
				i3=str(i[3])
				i4=str(i[4])
				i5=str(i[5])
				i6=str(i[6])

				beginning="<tr style='background-color:white;'>"
				bodyEl ="<td style='text-align:center;'> " + i0 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i1 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i2 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i3 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i4 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i5 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i6 + " </td>"
				end="</tr>"
				allLines+=beginning+bodyEl+end
			tableBody=allLines
			tableEnd="</table>"
			tableHtml5=tablestrt+tableBody+tableEnd 
			cmd=""" df -h | awk '{printf "%-45s %10s %6s %6s %4s %s\\n",$1,$2,$3,$4,$5,$6}'"""			
			out = os.popen(cmd).read()
			out=out.strip(' \t\n\r')
			tablestrt1="	<table>"
			outx1=out.splitlines()

			for i in outx1:
				i=i.split()
				i0=str(i[0])
				i1=str(i[1])
				i2=str(i[2])
				i3=str(i[3])
				i4=str(i[4])
				i5=str(i[5])

				beginning="<tr style='background-color:white;'>"
				bodyEl ="<td style='text-align:center;'> " + i0 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i1 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i2 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i3 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i4 + " </td>"
				bodyEl+="<td style='text-align:center;'> " + i5 + " </td>"


				end="</tr>"
				allLines1+=beginning+bodyEl+end
			

			tableBody1=allLines1

			tableEnd="</table>"
			table1Html5=tablestrt1+tableBody1+tableEnd

				
			
			if "ERROR" not in output:
				log.info('ExitCode: 0')
				log.info("ExitDesc: Capacity Planning Successfull")
				print "ExitCode: 0"
				print "ExitDesc: Capacity Planning Successfull"
				Status="Successful Execution"
			else:
				print "ExitCode: 1"
				print "ExitDesc: Error Occured:%s"%output
				log.info('ExitCode: 1')
				log.info('ExitDesc: Error Occured:%s'%output)
				Status="Some error Occured. Check logs"					
			
				
		else:
			print "ExitCode:10"
			print "ExitDesc:Enter proper Execution_Location input"
			log.info("ExitCode:10")
			log.info("ExitDesc:Enter proper Execution_Location input")
			Status="Error Occurred."
			

	else:
		print "ExitCode: 10"
		print "ExitDesc: Missing Arguments"
		log.info('ExitCode:10')
		log.info('ExitDesc: Missing Arguments')
		Status="Error Occurred"
		
except Exception, e:
	print "ExitCode: 10"
	print "ExitDesc: script failed due to: {0}".format(e)
	log.info('ExitCode: 10')
	log.info('ExitDesc: Error Occurred. Check Logs')
	Status="Error Occured"
	
	
################################ Mail part ##################################

now = datetime.now()
dt = now.strftime("%A,%d-%B-%y")
dt=str(dt)
FROM  = '%s'%frommail
TO = '%s'%tomail 

SUBJECT = 'CAPACITY PLANNING REPORT '
body ="""
<html>
<H2> Database Status for %s </H2>
<style>
  table, th, td {
	border: 2px solid cyan;
	}
th, td {
	padding: 10px;
}
th {
	background-color:#f1f1c1;
}
body {
	margin-left: 5px;
	margin-top: 5px;
	margin-right: 0px;
	margin-bottom: 10px;
	table {
	border: thin solid #000000;
}
</style>

<TABLE>
<TR>
<TH>  Execution Type  </TH>
<TH>  Server Name  </TH>
<TH>  SID or Database name  </TH>
<TH>  Status  </TH>
<TH>  CAPACITY PLANNING REPORT  </TH>

</TR>
<TR>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>

</TR> 
</TABLE>

<TABLE>
<TR>
<TH>  Execution Type  </TH>
<TH>  Server Name  </TH>
<TH>  SID or Database name  </TH>
<TH>  Status  </TH>
<TH>  SPACE CHECK REPORT  </TH>

</TR>
<TR>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>
<TD>  %s  </TD>

</TR> 
</TABLE>
</BODY>
</HTML>""" %(dt,Execution_Location,HostName,Sid,Status,tableHtml5,Execution_Location,HostName,Sid,Status,table1Html5)
	# Prepare actual message
	
part1="""From: %s 
To: %s 
Subject: %s
Content-Type: multipart/mixed;
""" %(frommail, tomail, SUBJECT)

part2 = """Content-Type: text/html
%s
""" %body


message = part1 + part2


try:
	client = smtplib.SMTP(smtpserver)
	client.sendmail(FROM, TO, message)
	client.quit()
	print "Email sent"
	log.info('Email Sent')
	
except Exception, e:
	print "Email sending failed due to: {0}".format(e)
	log.info('Email sending failed due to: {0}'.format(e))
